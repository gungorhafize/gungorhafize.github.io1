---
layout: post
title: Build Types | Build Variants | Product Flavors
date: 2020-09-22 00:00:00 +0300
description:
img: ekran.png # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [Android, Build Types, Build Variants, Product Flavor, kotlin] # add tag
---

There will be different stages of product release that is our android project and these stages involves 
* Development(debugging required) 
* Testing of application 
* Releasing application to the play store

So while developing an Android application, we ordinarily want to diverse types of APKs or you can tell different versions of APK during the development and release stage and testing stages.
For instance, you might need one debug APK without having proguard file or one debug APK with proguard file or you may need one APK for your free users and one APK for your paid users or you may need one APK for Android version 10 and above and one APK for Android version below 10 and there are numerous other probabilities.
But the inquiry is, how you are going to create these numerous versions of your App. Are you going to have dissimilar projects for these versions or only one project is sufficient?
Inasmuchas the code is going to stay just about the alike and just some APIs or some build configurations are going to modify? 
So, how to reach this? This can be reachable by using Build Variants.

***Build Types and Build Variants***

While building any Android application, we create various build types such as "debug" and "release".
Therewital, we can create diverse product flavors for the same app, for example, the free product flavor for free users and the paid product flavor for the paid users. 
So, Android Studio provides a property of Build Variants that can be thought of as a cartesian product of all your build types and all your product flavors.
All you need to do is add different build types in your module-level build.gradle file and during development or production, you can merely select the Build Variant you want to test or release.

By default, the Android Studio will produce "debug" and "release" Build Types for the project.
the Build Variant choice can be found at the left part of the screen and this part is usually below Resource Manager within Android Studio or enter into to Build > Select Build Variant or just press cmd + shift + A and search for "Build Variant":

<p align="center">
  <img width="500" height="400" src="https://user-images.githubusercontent.com/33956266/142142414-cf49e08f-030f-4854-834b-73ca94da6f48.PNG">
</p>

So, to change the Build Type, all you need to do is just select your Build Type from the Build Variant and next the project sync, you are ready. But how to compose a Build Type? Let's see.

***Add Build Types***

By default, whenever you create any project, after that Android Studio will create two build types for the project as "debug" and "release". But in order to add more build types, you need to add them to your module-level build.gradle file and under the buildTypes block. 
The following is an example of the same:
```
android {

    defaultConfig {
        applicationId "com.variants"
        versionCode 1
        versionName "0.0.1"
        ...
    }

 buildTypes {

        debug {
            versionNameSuffix ".dev"
            debuggable true

        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        minifiedDebug {
            versionNameSuffix ".dev"
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
    }
```
There are three build types as debug, release, and minifiedDebug in above code. The debug and release are the alike generated by Android Studio with some extra properties and minifiedDebug is the new build type that is a combination of proguard and debug. 
If you attentively look at the code, at that case you will discover that in the defaultConfig block, the version name is "0.0.1" and in the debug and minifedDebug build type, we added a ".dev" suffix to the version name. This will distinguish the dev APK from the prod APK.
Likewise, you can create the build type named noMinifedRelease that will be a compound of release + without proguard.
There are definite states where you want to use the similar properties of some of your previous build types and add or change some properties to create a new build type. To do so you can use initWith:

```
newBuildType {
    initWith debug
    versionNameSuffix ".newbuild"
    ...
}
```
The above is the code of a new build type name newBuildType.
 Onwards we are using initWith debug, so it will contain all the properties of debug and we can add more properties to it or we can also edit some of the properties of debug and keep other things as it is. 
In our state, we edited the versionNameSuffix and setted it with ".newbuild" instead of ".dev" that is there in the debug.
Now, if we open the Build Variants option in the Android Studio, at that time we will detect 4 build variants as debug, release, minifiedDebug, and newBuildType. You can select any of these for your build.
NOTE: If you are using Kotlin DSL in your build.gradle file, thereafter to add a build type, you need to use create("yourBuildTypeName") method in buildTypes block. 

***Adding Product Flavors***

You can think of Product Flavors as dissimilar variants of our app. i.e. if you are providing different content to different users but using the same code base, then you can add product flavors to your app.
For instance, we can add product flavors such as "development" and "production", Inside these flavors you can add different API keys for the similar working flow.
 For instance, we can add the development API in the development flavor and production API in the production flavor.
To add a product flavor you need to add the productFlavors block inside the android block and also all product flavor must have some flavor dimension:
```
android {
    ...
    defaultConfig {...}
    buildTypes {
        debug{...}
        release{...}
    }
    
    flavorDimensions "verse"
    productFlavors {
        development {
            dimension "verse"
            versionNameSuffix ".dev"
        }
        production {
            dimension "verse"
            versionNameSuffix ".prod"
        }
    }
}
```
The most beautiful part of product flavors is that they are consolidated with build types. For instance, if we have two build types named "debug" and "release" and two product flavors which has named "development" and "production", then your build variants will be:

   * developmentDebug
   * developmentRelease
   * productionDebug
   * productionRelease

As a result, we can select any of the build variants you want for your build.

You can create as a lot of product flavor dimensions as you want by separating each dimension from others using with comma(,) and use it by using dimension "dimensionName". For instance:
```
flavorDimension "dimensionOne", "dimensionTwo", "dimensionThree"
```
